import telebot
from telebot import types

API_TOKEN = '–¢–û–ö–ï–ù–ë–û–¢–ê'
CHANNEL_NAME = '@USERNAME–í–ê–®–ï–ì–û–ö–ê–ù–ê–õ–ê'
DEVELOPER_ID = –°–Æ–î–êID–ê–î–ú–ò–ù–ê 
ADMIN_USER_ID = –ò –°–Æ–î–êID–ê–î–ú–ò–ù–ê 

bot = telebot.TeleBot(API_TOKEN)

meme_storage = {}
users_data = {}  

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {message.from_user.first_name}! –û—Ç–ø—Ä–∞–≤—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–æ—Ç–æ –º–µ–º! üòÑ")

@bot.message_handler(commands=['send_message'])
def start_message_distribution(message):
    if message.from_user.id == DEVELOPER_ID:
        bot.send_message(DEVELOPER_ID, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        bot.register_next_step_handler(message, handle_message_input)
    else:
        bot.send_message(message.chat.id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.")

def handle_message_input(message):
    input_text = message.text
    if input_text:
        distribute_message(input_text)
    else:
        bot.send_message(DEVELOPER_ID, "–í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")

def distribute_message(message_text):
    delivered_users = []

    for user_id, user_data in users_data.items():
        if user_id != DEVELOPER_ID:
            try:
                bot.send_message(user_id, message_text)
                delivered_users.append(f"@{user_data.get('username', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_{user_id}')}")
            except telebot.apihelper.ApiException as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    delivered_text = (f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: "
                      f"{', '.join(delivered_users)}" if delivered_users
                      else "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    bot.send_message(DEVELOPER_ID, delivered_text)

@bot.message_handler(content_types=['photo', 'video'])
def handle_media(message):
    file_id = (message.photo[-1].file_id if 'photo' in message.content_type else message.video.file_id)
    key = (message.chat.id, message.message_id)
    meme_storage[key] = {'file_id': file_id, 'user_id': message.from_user.id, 'username': message.from_user.username, 'content_type': message.content_type}

    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text="–î–∞‚úÖ", callback_data=f"moderate_meme_{key}")
    markup.add(button)
    bot.send_message(message.chat.id, f"–•–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –º–µ–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é? üßê\n–ú–µ–º –±—É–¥–µ—Ç –Ω–µ –ø—Ä–∏–Ω—è—Ç –µ—Å–ª–∏ —Ç—É—Ç –µ—Å—Ç—å:\n-–ü—Ä–∏—à–µ–ª—å—Ü—ã\n- –í—ã –Ω–µ –ª—é–±–∏—Ç–µ –∫–æ–º–∞—Ä—É\n- –í—ã —Ö–æ–ª–æ–¥–∏–ª—å–Ω–µ–∫–æ—Ñ–∏–ª", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('moderate_meme'))
def query_handler(call):
    key = eval(call.data.split('_')[-1])
    if key in meme_storage:
        meme_info = meme_storage[key]
        markup = types.InlineKeyboardMarkup()
        button_approve = types.InlineKeyboardButton(text="–û–¥–æ–±—Ä–∏—Ç—å ‚úÖ", callback_data=f"approve_{key}")
        button_reject = types.InlineKeyboardButton(text="–û—Ç–∫–∞–∑–∞—Ç—å ‚ùå", callback_data=f"reject_{key}")
        markup.add(button_approve, button_reject)
        if meme_info['content_type'] == 'photo':
            sent_message = bot.send_photo(DEVELOPER_ID, meme_info['file_id'], reply_markup=markup, caption=f"–ú–µ–º –æ—Ç @{meme_info['username']}! üòÇ")
        elif meme_info['content_type'] == 'video':
            sent_message = bot.send_video(DEVELOPER_ID, meme_info['file_id'], reply_markup=markup, caption=f"–ú–µ–º –æ—Ç @{meme_info['username']}! üòÇ")
        bot.delete_message(call.message.chat.id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: 'approve_' in call.data or 'reject_' in call.data)
def moderation_handler(call):
    action, key = call.data.split('_')[0], eval('_'.join(call.data.split('_')[1:]))
    if key in meme_storage:
        meme_info = meme_storage[key]
        user_id = meme_info['user_id']
        username = meme_info['username']
        file_id = meme_info['file_id']
        if action == 'approve':
            if meme_info['content_type'] == 'photo':
                sent_message = bot.send_photo(CHANNEL_NAME, file_id, caption=f"–ú–µ–º –æ—Ç @{username}! üòÇ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –º–µ–º: @BotMemzBot")
            elif meme_info['content_type'] == 'video':
                sent_message = bot.send_video(CHANNEL_NAME, file_id, caption=f"–ú–µ–º –æ—Ç @{username}! üòÇ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –º–µ–º: @BotMemzBot")
            bot.send_message(user_id, f"–¢–≤–æ–π –º–µ–º –±—ã–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ! üéâ\n–í–æ—Ç —Å—Å—ã–ª–∫–∞: https://t.me/{CHANNEL_NAME[1:]}/{sent_message.message_id}")
        elif action == 'reject':
            bot.send_message(user_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–≤–æ–π –º–µ–º –Ω–µ –ø—Ä–∏–Ω—è—Ç. ‚òπÔ∏è –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!")
        bot.delete_message(call.message.chat.id, call.message.message_id)
        del meme_storage[key]

@bot.message_handler(func=lambda message: True)
def handle_unsupported_content(message):
    bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π –º–µ–º—ã –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ. üôè")

if __name__ == '__main__':
    bot.infinity_polling()
